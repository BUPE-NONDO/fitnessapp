rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwnData() {
      return isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      
      // User profiles subcollection
      match /profiles/{profileId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Workouts collection - users can only access their own workouts
    match /workouts/{workoutId} {
      allow read, write: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Workout sets - users can only access sets for their own workouts
    match /workoutSets/{setId} {
      allow read, write: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Exercises collection - public read access for exercise library
    match /exercises/{exerciseId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can modify exercises
    }
    
    // Nutrition logs - users can only access their own logs
    match /nutritionLogs/{logId} {
      allow read, write: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Goals collection - users can only access their own goals
    match /goals/{goalId} {
      allow read, write: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Progress tracking - users can only access their own progress
    match /progress/{progressId} {
      allow read, write: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Community features - users can read public posts, write their own
    match /community/{postId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Challenges - users can read all challenges, join/create their own
    match /challenges/{challengeId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (resource == null || resource.data.createdBy == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.createdBy == request.auth.uid;
    }
    
    // Challenge participants - users can read all participants, manage their own participation
    match /challengeParticipants/{participantId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Wearable device data - users can only access their own data
    match /wearableData/{dataId} {
      allow read, write: if isAuthenticated() && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if false; // Only accessible via admin SDK
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
