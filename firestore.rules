rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for validation - Updated for new user access
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidUser() {
      return isAuthenticated() &&
        request.resource.data.uid == request.auth.uid &&
        request.resource.data.email is string &&
        request.resource.data.displayName is string;
        // Removed strict createdAt requirement to allow serverTimestamp()
    }

    function isValidUserUpdate() {
      return isAuthenticated() &&
        request.resource.data.email is string &&
        request.resource.data.displayName is string;
        // Simplified validation for updates - allow any additional fields
    }

    function isValidGoal() {
      return isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.title is string;
        // Simplified goal validation - allow flexible goal structures
    }

    function isValidLog() {
      return isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
        // Simplified log validation - allow flexible log structures
    }

    // Users can only access their own user document
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidUser();
      allow update: if isOwner(userId) && isValidUserUpdate();
      allow delete: if isOwner(userId);

      // Isolated user subcollections - complete user data isolation
      match /onboarding/{docId} {
        allow read, write: if isOwner(userId);
      }

      match /progress/{docId} {
        allow read, write: if isOwner(userId);
      }

      match /workout_plans/{docId} {
        allow read, write: if isOwner(userId);
      }

      match /workout_sessions/{docId} {
        allow read, write: if isOwner(userId);
      }

      match /goals/{docId} {
        allow read, write: if isOwner(userId);
      }

      match /activity_logs/{docId} {
        allow read, write: if isOwner(userId);
      }

      match /achievements/{docId} {
        allow read, write: if isOwner(userId);
      }

      match /preferences/{docId} {
        allow read, write: if isOwner(userId);
      }

      // Allow access to any other user subcollections
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Users can only access their own user stats
    match /user_stats/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Users can only access their own activity logs
    match /activity_logs/{logId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Users can only access their own goals
    match /goals/{goalId} {
      allow read: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow create: if isValidGoal();
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }

    // Users can only access logs for their own goals
    match /logs/{logId} {
      allow read: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow create: if isValidLog();
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }

    // Users can only access their own badges
    match /badges/{badgeId} {
      allow read: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }

    // Users can only access their own workout routines
    match /workout_routines/{routineId} {
      allow read: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }

    // Users can only access their own workout sessions
    match /workout_sessions/{sessionId} {
      allow read: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() &&
        resource.data.userId == request.auth.uid;
    }

    // Exercise database - read-only for all authenticated users
    match /exercises/{exerciseId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write
    }

    // Badge definitions are read-only for all authenticated users
    match /badgeDefinitions/{badgeDefId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write (handled via admin SDK)
    }

    // System metadata (read-only for authenticated users)
    match /metadata/{docId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write
    }

    // Admin collections (restricted access)
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admin SDK can write
    }

    // System logs (write-only for authenticated users, read for admins)
    match /system_logs/{logId} {
      allow create: if isAuthenticated();
      allow read: if false; // Only admin SDK can read
      allow update, delete: if false; // Immutable logs
    }

    // Allow any authenticated user to read/write their own data in any collection
    // This is a fallback rule for new collections
    match /{collection}/{document} {
      allow read, write: if isAuthenticated() &&
        (collection.matches('users/[^/]+/.*') &&
         collection.split('/')[1] == request.auth.uid);
    }
  }
}
